plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}


repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url = "https://mvn.devos.one/releases/" }
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven {
        name = "Greenhouse Maven"
        url = 'https://repo.greenhouse.house/releases/'
    }
    maven {
        url "https://jitpack.io/" // Fabric ASM
        content {
            excludeGroup "io.github.fabricators_of_create"
        }
    }
    maven {
        name = "Ladysnake Mods"
        url = 'https://maven.ladysnake.org/releases'
    }
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    maven { url "https://maven.shedaniel.me/" }
}


dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    implementation 'org.mariuszgromada.math:MathParser.org-mXparser:5.2.1'

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"


    // compile against the JEI API but do not include it at runtime
    modCompileOnly(("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    modCompileOnly(("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    modRuntimeOnly(("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"))

    modImplementation "maven.modrinth:cYG2StiC:kStHsvFA"
    modImplementation "maven.modrinth:x3HZvrj6:LM56MFWP"
    modApi "me.shedaniel.cloth:cloth-config-fabric:11.1.136"
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
}

fabricApi {
    configureDataGeneration()
}

loom {
    accessWidenerPath = file("src/main/resources/smartkeyprompts.accesswidener")
}


processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}